# -*- coding: utf-8 -*-
"""Hook3DDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DfMRETGZbdH1Pm7H6clelNXbbgATlzHL
"""

import numpy as np

def sample_stress_strain(N, E=1e8, nu=0.3):
    """
    Generate random strain vectors, isotropic stiffness matrix, and stresses

    Parameters
    ----------
    N : int
        Number of strain vectors to sample.
    E : float
        Young's modulus (default = 1e8).
    nu : float
        Poisson's ratio (default = 0.3).

    Returns
    -------
    strains : ndarray of shape (N, 6, 1)
        Random strain vectors in Voigt notation.
    stresses : ndarray of shape (N, 6, 1)
        Corresponding stress vectors.
    C : ndarray of shape (6, 6)
        Isotropic stiffness matrix.
    """
    # Sample random strain vectors
    strains = np.random.uniform(0.0, 0.01, size=(N, 6, 1))
    strains[:, 3:, :] *= 2  # Multiply last 3 components by 2

    # Build isotropic stiffness matrix using Lame parameters
    lam = E * nu / ((1 + nu) * (1 - 2 * nu))
    mu = E / (2 * (1 + nu))

    C = np.array([
        [lam + 2*mu, lam,        lam,        0,  0,  0],
        [lam,        lam + 2*mu, lam,        0,  0,  0],
        [lam,        lam,        lam + 2*mu, 0,  0,  0],
        [0,          0,          0,          mu, 0,  0],
        [0,          0,          0,          0,  mu, 0],
        [0,          0,          0,          0,  0,  mu]
    ])

    # Compute stresses
    stresses = np.einsum('ij,njk->nik', C, strains)

    strains[:, 3:, :] *= 0.5

    return strains, stresses, C

strains, stresses, C = sample_stress_strain(1000)