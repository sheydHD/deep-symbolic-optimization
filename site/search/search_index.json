{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deep Symbolic Optimization Documentation","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p> </p> <p>Welcome to the Deep Symbolic Optimization (DSO) documentation hub. This site follows an industry-standard hierarchy that separates guides, tutorials, reference, and design documents to serve both new users and core developers.</p>"},{"location":"#sections","title":"Sections","text":"Section Content Guides Installation, getting started Rules Code style, git policies, testing Structure Project layout and architecture Tasks Development plans and roadmaps"},{"location":"#navigation","title":"Navigation","text":"<pre><code>/docs\n\u251c\u2500\u2500 README.md                # You are here\n\u251c\u2500\u2500 overview.md              # Product summary &amp; scope\n\u251c\u2500\u2500 guides/                  # User &amp; operator guides\n\u251c\u2500\u2500 rules/                   # Release &amp; maintenance docs\n\u251c\u2500\u2500 structure/               # Policies (coding, git, docs\u2026)\n\u2514\u2500\u2500 tasks/                   # Governance, security, conduct\n</code></pre> <p>Each sub-directory contains its own <code>README.md</code> to aid discoverability (except where a single document suffices).</p>"},{"location":"#building-docs-locally","title":"Building Docs Locally","text":"<pre><code>uv run mkdocs serve  # Live-reload at http://127.0.0.1:8000/\n</code></pre> <p>If MkDocs isn't installed yet, run:</p> <pre><code>uv pip install mkdocs-material mkdocstrings[python]\n</code></pre> <p>For contribution guidelines, see the Rules overview.</p>"},{"location":"core/concept/","title":"DSO \u2013 Overview","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>Deep Symbolic Optimization (DSO) is a framework for generating compact, human-readable mathematical expressions that approximate data or control systems.</p>"},{"location":"core/concept/#scope","title":"Scope","text":"<ol> <li>Symbolic Regression \u2013 discover analytic formulas that fit data.</li> <li>Control Tasks \u2013 evolve interpretable controllers for simulated environments.</li> <li>Hybrid GP + RL \u2013 meld genetic programming with gradient-based policy search.</li> </ol>"},{"location":"core/concept/#key-features","title":"Key Features","text":"<ul> <li>Modular task interface (<code>dso.task</code>) supporting regression and control back-ends.</li> <li>Pluggable policy representations (RNN, Transformer) with prior libraries.</li> <li>GPU-accelerated evaluation kernels via Cython/Numba.</li> <li>Extensible search spaces loaded from JSON definitions.</li> </ul>"},{"location":"core/concept/#audience","title":"Audience","text":"<ul> <li>Researchers in symbolic AI and reinforcement learning.</li> <li>Engineers needing compact surrogate models or controllers.</li> <li>Educators demonstrating program synthesis techniques.</li> </ul>"},{"location":"core/concept/#quick-links","title":"Quick Links","text":"<ul> <li>Getting started: <code>guides/getting_started.md</code></li> <li>Configuration guide: <code>guides/installation.md</code></li> </ul>"},{"location":"core/getting_started/","title":"Getting Started","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>This quick guide walks you through training a symbolic regression model on the classic Nguyen-2 benchmark.</p>"},{"location":"core/getting_started/#1-install-activate-environment","title":"1. Install &amp; Activate Environment","text":"<ol> <li> <p>Clone the repo: <code>git clone https://github.com/your-org/dso.git &amp;&amp; cd dso</code></p> </li> <li> <p>Run setup: <code>./main.sh</code> (press <code>1</code> when prompted)</p> </li> <li> <p>Activate environment: <code>source .venv/bin/activate</code></p> </li> </ol> <p>That's it! You're ready to use DSO.</p>"},{"location":"core/getting_started/#2-run-the-example-benchmark","title":"2. Run the Example Benchmark","text":"<p>To run a symbolic regression benchmark with the Nguyen-2 dataset, use the following command:</p> <pre><code>python tools/python/benchmark/benchmark.py dso/dso/config/examples/regression/Nguyen-2.json\n</code></pre> <p>This command will:</p> <ol> <li>Parse the JSON config file for Nguyen-2.</li> <li>Build the search space and launch the training process.</li> </ol> <p>Logs and checkpoints will be stored in a timestamped directory (e.g., <code>log/regression_YYYY-MM-DD_HH-MM-SS/</code>).</p>"},{"location":"core/getting_started/#3-visualise-the-result","title":"3. Visualise the Result","text":"<p>After a successful run, you can inspect the best found program:</p> <pre><code>from dso import DeepSymbolicOptimizer\nimport json\nimport os\n\n# Replace with the actual path to your latest run directory\nlatest_run_dir = \"log/regression_YYYY-MM-DD_HH-MM-SS\" # Update this path\n\nwith open(os.path.join(latest_run_dir, 'best_program.json')) as f:\n    prog = DeepSymbolicOptimizer.load(json.load(f)['program'])\nprint(prog.sympy_expr)\n</code></pre>"},{"location":"core/getting_started/#4-run-tests","title":"4. Run Tests","text":"<p>To verify your setup and the codebase integrity, run the unit tests:</p> <pre><code>pytest -q dso/dso/test/\n</code></pre>"},{"location":"core/getting_started/#5-next-steps","title":"5. Next Steps","text":"<ul> <li>Explore other datasets in <code>dso/dso/task/regression/data/</code>.</li> <li>Tweak the search space via <code>dso/dso/scripts/search_space.py</code>.</li> <li>See the Project Structure for code organization.</li> </ul>"},{"location":"core/setup/","title":"Installation Guide","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p>"},{"location":"core/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or 3.11 (check with <code>python --version</code>).</li> <li>GCC / Clang toolchain for Cython extensions.</li> <li>(Optional) CUDA-enabled GPU for acceleration.</li> <li>uv package manager \u2013 install once via <code>pipx install uv</code> (or <code>pip install --upgrade uv</code>).</li> </ul>"},{"location":"core/setup/#quick-install","title":"Quick Install","text":"<ol> <li> <p>Clone the repo: <code>git clone https://github.com/your-org/dso.git &amp;&amp; cd dso</code></p> </li> <li> <p>Run setup: <code>./main.sh</code> (press <code>1</code> when prompted)</p> </li> <li> <p>Activate environment: <code>source .venv/bin/activate</code></p> </li> </ol> <p>That's it! You're ready to use DSO.</p>"},{"location":"core/setup/#test-the-setup","title":"Test the Setup","text":"<pre><code># Run all tests\npytest -q dso/dso/test/\n</code></pre> <p>If all tests pass, you are ready to go!</p>"},{"location":"core/setup/#understanding-mainsh","title":"Understanding <code>main.sh</code>","text":"<p>The <code>main.sh</code> script is the primary entry point for interacting with the Deep Symbolic Optimization (DSO) project. It provides a convenient way to perform common development and operational tasks through a simple command-line interface.</p> <p>The script offers the following options:</p> <ul> <li> <p>Option 1: Setup the Environment   This option (executed by default if no arguments are provided to <code>main.sh</code>, or by explicitly running <code>python tools/python/setup/setup.py</code>) sets up the necessary Python virtual environment and installs all project dependencies, including the DSO package itself in editable mode. It compiles requirements from the <code>.in</code> files located in <code>configs/requirements/in_files/</code>.</p> </li> <li> <p>Option 2: Run Tests   This option (typically accessed via <code>main.sh test</code> or <code>pytest -q dso/dso/test/</code>) executes the project's test suite. It verifies that the environment is correctly set up and that all packages and code functionalities are working as expected.</p> </li> <li> <p>Option 3: Run Benchmarks   This option (accessible via <code>main.sh benchmark</code> or <code>python tools/python/benchmark/benchmark.py</code>) allows you to run performance benchmarks on the code. This is crucial for assessing the efficiency and functionality of optimizations and changes within the project.</p> </li> </ul>"},{"location":"rules/","title":"Project Rules Overview","text":"<p>This directory contains all policy documents that govern code quality, workflows, and security for the Deep Symbolic Optimization project.</p> Document Purpose <code>code_style.md</code> Formatting, linting, and typing guidelines <code>testing_rules.md</code> Unit test structure and coverage targets <code>git_rules.md</code> Commit conventions and branching policies <code>branching_model.md</code> Trunk-based branching strategy <code>docs_rules.md</code> Documentation writing standards <code>pr_review_rules.md</code> Pull-request creation &amp; review process <code>project_structure.md</code> Repository layout conventions <code>security_rules.md</code> Secure coding &amp; dependency policies <p>Refer to these files before submitting any code or documentation changes.</p>"},{"location":"rules/branching_model/","title":"Branching Model","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>The project uses trunk-based development with short-lived topic branches.</p>"},{"location":"rules/branching_model/#1-branch-types","title":"1. Branch Types","text":"Type Prefix Purpose Main <code>main</code> Always deployable &amp; protected Feature <code>feat/</code> New functionality Fix <code>fix/</code> Bug fixes Chore <code>chore/</code> Maintenance tasks (docs, build, deps) Hotfix <code>hotfix/</code> Critical patch directly off <code>main</code> Release <code>release/</code> Version stabilisation (rare)"},{"location":"rules/branching_model/#2-workflow","title":"2. Workflow","text":"<ol> <li>Create branch: <code>git switch -c feat/&lt;short-topic&gt;</code></li> <li>Commit following Conventional Commits.</li> <li>Open draft PR early; update as work progresses.</li> <li>Rebase frequently on <code>main</code>.</li> <li>Squash-merge once CI passes and approvals met.</li> </ol>"},{"location":"rules/branching_model/#3-tags-releases","title":"3. Tags &amp; Releases","text":"<ul> <li>Semantic version tags (<code>v2.3.0</code>) applied on <code>main</code> after release PR merges.</li> </ul>"},{"location":"rules/branching_model/#4-hotfix-policy","title":"4. Hotfix Policy","text":"<ul> <li>Branch <code>hotfix/&lt;issue&gt;</code> from <code>main</code>.</li> <li>Fast-track reviews, merge, then tag <code>vX.Y.Z+1</code>.</li> </ul>"},{"location":"rules/code_style/","title":"Code Style &amp; Quality Guide","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>This document defines mandatory coding conventions and quality gates for the Deep Symbolic Optimization (DSO) project.</p> <p>Follow these rules to ensure readability, consistency, and long-term maintainability.</p>"},{"location":"rules/code_style/#1-toolchain","title":"1. Toolchain","text":"Task Tool Invocation (local) Formatting black <code>uv pip run black .</code> Linting + Imports ruff <code>uv pip run ruff check .</code> Static typing mypy <code>uv pip run mypy .</code> Complexity metrics radon <code>uv pip run radon cc dso/</code> <p>All of the above run automatically via pre-commit hooks.</p>"},{"location":"rules/code_style/#2-formatting-black","title":"2. Formatting (Black)","text":"<ul> <li>Line length: 88 chars (Black default).</li> <li>Single quotes <code>'</code> preferred unless escaping is required.</li> <li>Never commit unformatted code \u2013 run <code>make format</code> or rely on pre-commit.</li> </ul>"},{"location":"rules/code_style/#3-linting-ruff","title":"3. Linting (Ruff)","text":"<ul> <li>Ruff ruleset <code>\"all\"</code> minus legacy Py2 checks.</li> <li>Important categories: <code>F/E/W</code> (flake8), <code>I</code> (isort), <code>D</code> (pydocstyle), <code>S</code> (bandit).</li> <li>CI treats any Ruff finding as an error.</li> </ul>"},{"location":"rules/code_style/#4-typing-mypy","title":"4. Typing (Mypy)","text":"<ul> <li>Run with <code>--strict</code>.</li> <li>3rd-party stubs installed via <code>uv pip install types-&lt;pkg&gt;</code>.</li> <li><code># type: ignore</code> only with linked issue explaining why.</li> </ul>"},{"location":"rules/code_style/#5-naming-conventions","title":"5. Naming Conventions","text":"Element Style Example Modules <code>snake_case.py</code> <code>memory_manager.py</code> Packages lowercase <code>policy</code> Classes PascalCase <code>DeepOptimizer</code> Functions snake_case <code>evaluate_fitness</code> Constants UPPER_SNAKE_CASE <code>MAX_DEPTH</code> <p>Avoid cryptic abbreviations unless industry-standard (<code>np</code>, <code>pd</code>, <code>tf</code>).</p>"},{"location":"rules/code_style/#6-imports","title":"6. Imports","text":"<p>Ruff (isort) enforces three groups separated by a blank line:</p> <ol> <li>Standard library</li> <li>Third-party</li> <li>Local (<code>dso</code>, <code>tests</code>)</li> </ol>"},{"location":"rules/code_style/#7-docstrings","title":"7. Docstrings","text":"<ul> <li>Use Google style (NumPy style acceptable).</li> <li>Required for every public module, class, function, and method.</li> <li>Sections: <code>Args</code>, <code>Returns</code>, <code>Raises</code>, <code>Examples</code>.</li> </ul>"},{"location":"rules/code_style/#8-error-handling-logging","title":"8. Error Handling &amp; Logging","text":"<ul> <li>Catch the most specific exception possible.</li> <li>Use the standard <code>logging</code> library (<code>logging.getLogger(__name__)</code>).</li> <li>Never use bare <code>except:</code>.</li> </ul>"},{"location":"rules/code_style/#9-todo-fixme-comments","title":"9. TODO / FIXME Comments","text":"<p>Reference an issue: <code># TODO(#123): rationale</code>.</p>"},{"location":"rules/code_style/#10-testability","title":"10. Testability","text":"<ul> <li>Write deterministic functions when feasible.</li> <li>Minimise side-effects; inject dependencies.</li> </ul>"},{"location":"rules/docs_rules/","title":"Documentation Rules","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>These guidelines apply to READMEs, API docs, wikis, and internal guides.</p>"},{"location":"rules/docs_rules/#1-structure","title":"1. Structure","text":"<ul> <li>Use Markdown (<code>.md</code>) for all docs.</li> <li>Begin with a clear Title and Purpose section.</li> <li>Use headings in logical hierarchy (<code>#</code>, <code>##</code>, <code>###</code>).</li> <li>Include a Table of Contents if file &gt; 2 pages.</li> <li>Parent directories (levels 1\u20132) require a <code>README.md</code>; deeper levels do not.</li> </ul>"},{"location":"rules/docs_rules/#2-language-style","title":"2. Language &amp; Style","text":"<ul> <li>Clear, concise, professional English.</li> <li>Active voice; avoid jargon or define it.</li> <li>Short sentences and paragraphs.</li> </ul>"},{"location":"rules/docs_rules/#3-formatting","title":"3. Formatting","text":"<ul> <li>Bullet or numbered lists to improve readability.</li> <li>Bold or <code>inline code</code> for key terms.</li> <li>Code blocks (```python) for multi-line snippets.</li> <li>Tables for configuration values or comparisons.</li> </ul>"},{"location":"rules/docs_rules/#4-versioning-changelog","title":"4. Versioning &amp; Changelog","text":"<ul> <li>Add Version and Last updated at top.</li> <li>Maintain project-wide <code>CHANGELOG.md</code>.</li> </ul>"},{"location":"rules/docs_rules/#5-code-documentation","title":"5. Code Documentation","text":"<ul> <li>Each script: header comment with purpose, author, usage.</li> <li>Public functions/classes: Google-style docstrings.</li> <li>Link to external references where helpful.</li> </ul>"},{"location":"rules/docs_rules/#6-review-ownership","title":"6. Review &amp; Ownership","text":"<ul> <li>Docs reviewed in every PR.</li> <li>Assign a documentation owner for each repo area.</li> <li>Keep docs current with codebase.</li> </ul>"},{"location":"rules/docs_rules/#7-git-practices","title":"7. Git Practices","text":"<ul> <li>Commits touching docs use <code>docs:</code> Conventional Commit type.</li> <li>Docs must accompany significant code changes.</li> </ul>"},{"location":"rules/docs_rules/#8-related-policies","title":"8. Related Policies","text":"<ul> <li>Source code conventions: <code>code_style.md</code></li> <li>Git workflow &amp; commits: <code>git_rules.md</code></li> </ul>"},{"location":"rules/git_rules/","title":"Git Rules","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p>"},{"location":"rules/git_rules/#1-commit-conventions","title":"1. Commit Conventions","text":"<ul> <li>Use Conventional Commits; linted by commit-lint hook.</li> <li>Keep subject \u2264 72 chars; use present tense: <code>fix(core): handle None input</code>.</li> <li>Body lines wrapped at 80 chars; explain what and why.</li> <li>Include issue reference (<code>Fixes #123</code>) when applicable.</li> </ul>"},{"location":"rules/git_rules/#2-grouping-changes","title":"2. Grouping Changes","text":"<ul> <li>One logical change per commit.</li> <li>Run <code>git add -p</code> to stage hunks selectively.</li> <li>Unrelated file updates must go into separate commits or PRs.</li> </ul>"},{"location":"rules/git_rules/#3-branching-merging","title":"3. Branching &amp; Merging","text":"<ul> <li>Follow <code>branching_model.md</code>.</li> <li>Use Squash &amp; Merge to keep history linear.</li> <li>Delete remote branches after merge to reduce clutter.</li> </ul>"},{"location":"rules/git_rules/#4-signatures-dco","title":"4. Signatures &amp; DCO","text":"<ul> <li>Sign commits where possible (<code>git commit -S</code>).</li> <li>Ensure <code>Signed-off-by</code> trailer for external contributions.</li> </ul>"},{"location":"rules/git_rules/#5-large-files","title":"5. Large Files","text":"<ul> <li>Use Git LFS for binaries &gt;100 KB (if needed).</li> <li>Never commit datasets; rely on DVC or external storage.</li> </ul>"},{"location":"rules/git_rules/#6-hooks-automation","title":"6. Hooks &amp; Automation","text":"<ul> <li>Pre-commit runs lint, format, security, and type checks.</li> <li>CI blocks merges on failing checks.</li> </ul>"},{"location":"rules/pr_review_rules/","title":"Pull Request Creation &amp; Review Rules","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>These rules standardise how we collaborate on GitHub.</p>"},{"location":"rules/pr_review_rules/#1-opening-a-pr","title":"1. Opening a PR","text":"<ol> <li>Branch naming: <code>&lt;type&gt;/&lt;short-description&gt;</code> \u2013 see branching model (e.g., <code>feat/gp-tuner</code>, <code>fix/memory-leak</code>).</li> <li>Title uses Conventional Commits: <code>&lt;type&gt;(scope): message</code>    Example: <code>feat(core): parallel pool optimisations</code>.</li> <li>Fill out the PR template:</li> <li>Motivation &amp; Context</li> <li>Linked Issue(s) (<code>Fixes #123</code>)</li> <li>Checklist</li> <li>Screenshots / Benchmarks (if UI or perf related)</li> </ol>"},{"location":"rules/pr_review_rules/#2-author-checklist","title":"2. Author Checklist","text":"<ul> <li>[ ] Lint passes (<code>make lint</code>)</li> <li>[ ] Tests pass (<code>make test</code>)</li> <li>[ ] Coverage \u2265 target (<code>make coverage</code>)</li> <li>[ ] Docs updated (if applicable)</li> <li>[ ] No secrets committed (<code>git secrets --scan</code>)</li> <li>[ ] Changelog entry added (<code>CHANGELOG.md</code>)</li> </ul>"},{"location":"rules/pr_review_rules/#3-review-process","title":"3. Review Process","text":"<ul> <li>\u22651 approval for docs / test-only PRs.</li> <li>\u22652 approvals for code touching <code>dso/</code>.</li> <li>Reviewers focus on correctness, readability, security, performance, and docs.</li> <li>Use GitHub Suggested Changes when possible.</li> </ul>"},{"location":"rules/pr_review_rules/#4-resolving-feedback","title":"4. Resolving Feedback","text":"<ul> <li>Address every comment or mark as won't fix with rationale.</li> <li>Re-request review after pushing updates.</li> </ul>"},{"location":"rules/pr_review_rules/#5-merging","title":"5. Merging","text":"<ul> <li>Use Squash &amp; Merge to keep <code>main</code> linear.</li> <li>Rebase on latest <code>main</code> before merging: <code>git pull --rebase origin main</code>.</li> <li>Delete the feature branch after merge.</li> </ul>"},{"location":"rules/pr_review_rules/#6-reverts-hotfixes","title":"6. Reverts &amp; Hotfixes","text":"<ul> <li>Use <code>revert:</code> prefix in commit and PR title; raise with high priority.</li> </ul>"},{"location":"rules/project_structure/","title":"Project Structure Conventions","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p> <p>Canonical directory layout for the DSO repository.</p> <pre><code>.\n\u251c\u2500\u2500 dso/               # Source code package\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tests/             # Pytest suites mirroring dso/ structure\n\u251c\u2500\u2500 docs/              # Documentation (no executable code)\n\u2502   \u2514\u2500\u2500 rules/         # Policy documents (this folder)\n\u251c\u2500\u2500 examples/          # Jupyter notebooks &amp; usage demos\n\u251c\u2500\u2500 scripts/           # One-off helper scripts\n\u251c\u2500\u2500 data/              # Small reference datasets (&lt;10 MB)\n\u251c\u2500\u2500 .github/workflows/ # CI pipelines\n\u251c\u2500\u2500 pyproject.toml     # Build &amp; tooling configuration\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"rules/project_structure/#rules","title":"Rules","text":"<ol> <li>Every top-level directory has a <code>README.md</code> (except <code>tests</code>, explained in main README).</li> <li>Update <code>CHANGELOG.md</code> in every release PR.</li> <li>Do not commit generated artefacts (builds, virtualenvs); track via <code>.gitignore</code>.</li> <li>Large data goes through DVC or external storage; commit pointer files only.</li> <li>Integration tests live in <code>tests/integration/</code>, end-to-end flows in <code>tests/e2e/</code>.</li> <li>Experimental notebooks reside in <code>examples/</code> and must not import from <code>tests/</code>.</li> </ol>"},{"location":"rules/security_rules/","title":"Security Rules","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p>"},{"location":"rules/security_rules/#1-secrets-management","title":"1. Secrets Management","text":"<ul> <li>Never commit secrets, API keys, or credentials.</li> <li><code>.env</code> files are git-ignored; rely on environment variables.</li> <li>Pre-commit hook <code>git-secrets</code> scans staged changes.</li> </ul>"},{"location":"rules/security_rules/#2-dependency-hygiene","title":"2. Dependency Hygiene","text":"<ul> <li>Install via <code>uv pip install</code> for full hash-pinned lockfiles.</li> <li>Run <code>uv pip audit</code> in CI; build fails on critical vulnerabilities.</li> <li>Dependabot or Renovate keeps dependencies current.</li> </ul>"},{"location":"rules/security_rules/#3-secure-coding-practices","title":"3. Secure Coding Practices","text":"<ul> <li>Avoid <code>eval</code>, <code>exec</code>, or unsanitised inputs.</li> <li>Use parameterised queries for DB interactions.</li> <li>Validate external data, preferably with pydantic models.</li> </ul>"},{"location":"rules/security_rules/#4-runtime-hardening","title":"4. Runtime Hardening","text":"<ul> <li>Set <code>PYTHONHASHSEED=0</code> during tests for reproducibility.</li> <li>Implement structured logging and rotate logs securely.</li> </ul>"},{"location":"rules/security_rules/#5-vulnerability-disclosure","title":"5. Vulnerability Disclosure","text":""},{"location":"rules/testing_rules/","title":"Testing Rules","text":"<p>Version: 1.0 \u2022 Last updated: 2025-07-07</p>"},{"location":"rules/testing_rules/#1-framework-tools","title":"1. Framework &amp; Tools","text":"<ul> <li>pytest \u2265 8.0 for runner.</li> <li>hypothesis for property-based tests on mathematical functions.</li> <li>pytest-cov for coverage reporting.</li> </ul>"},{"location":"rules/testing_rules/#2-layout","title":"2. Layout","text":"<ul> <li>Tests under <code>tests/</code> mirroring package paths (<code>tests/dso/test_core.py</code>).</li> <li>Naming: <code>test_&lt;module&gt;.py</code>.</li> <li>Each public function/class must have at least one unit test.</li> </ul>"},{"location":"rules/testing_rules/#3-coverage-targets","title":"3. Coverage Targets","text":"<ul> <li>Minimum 80 % branch coverage; CI fails otherwise.</li> <li>New code should not lower overall coverage.</li> </ul>"},{"location":"rules/testing_rules/#4-parallel-deterministic","title":"4. Parallel &amp; Deterministic","text":"<ul> <li>Tests must be deterministic; seed randomness.</li> <li>Enable parallel run: <code>pytest -n auto</code>.</li> </ul>"},{"location":"rules/testing_rules/#5-fixtures-factories","title":"5. Fixtures &amp; Factories","text":"<ul> <li>Shared fixtures go in <code>tests/conftest.py</code>.</li> <li>Prefer factory helpers over large static data files.</li> </ul>"},{"location":"rules/testing_rules/#6-markers","title":"6. Markers","text":"<ul> <li><code>@pytest.mark.slow</code> \u2013 &gt;10 s runtime; excluded from default CI.</li> <li><code>@pytest.mark.integration</code> \u2013 spans multiple components.</li> </ul>"},{"location":"rules/testing_rules/#7-arrange-act-assert-pattern","title":"7. Arrange-Act-Assert Pattern","text":"<p>Structure each test into three clearly separated sections to improve readability.</p>"},{"location":"structure/project_structure/","title":"Structure","text":"<pre><code>deep-symbolic-optimization/\n\u251c\u2500\u2500 .cursorignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 main.bat\n\u251c\u2500\u2500 main.sh\n\u251c\u2500\u2500 progres.md\n\u251c\u2500\u2500 setup_analysis_report.md\n\u251c\u2500\u2500 tree.md\n\u251c\u2500\u2500 configs/\n\u2502 \u2514\u2500\u2500 requirements/\n\u2502   \u251c\u2500\u2500 core.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u251c\u2500\u2500 extras.txt\n\u2502   \u2514\u2500\u2500 in_files/\n\u2502     \u251c\u2500\u2500 core.in\n\u2502     \u251c\u2500\u2500 dev.in\n\u2502     \u2514\u2500\u2500 extras.in\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u251c\u2500\u2500 architecture/\n\u2502   \u251c\u2500\u2500 attachments/\n\u2502   \u251c\u2500\u2500 guides/\n\u2502   \u251c\u2500\u2500 legal/\n\u2502   \u251c\u2500\u2500 operations/\n\u2502   \u251c\u2500\u2500 reference/\n\u2502   \u251c\u2500\u2500 rules/\n\u2502   \u2514\u2500\u2500 todo/\n\u251c\u2500\u2500 dso/\n\u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u251c\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 setup_old.py\n\u2502   \u251c\u2500\u2500 tf_upgrade_report.txt\n\u2502   \u251c\u2500\u2500 upgrade_summary.md\n\u2502   \u2514\u2500\u2500 dso/\n\u2502     \u251c\u2500\u2500 __init__.py\n\u2502     \u251c\u2500\u2500 checkpoint.py\n\u2502     \u251c\u2500\u2500 const.py\n\u2502     \u251c\u2500\u2500 core.py\n\u2502     \u251c\u2500\u2500 cyfunc.cpp\n\u2502     \u251c\u2500\u2500 cyfunc.pyx\n\u2502     \u251c\u2500\u2500 execute.py\n\u2502     \u251c\u2500\u2500 functions.py\n\u2502     \u251c\u2500\u2500 library.py\n\u2502     \u251c\u2500\u2500 logeval.py\n\u2502     \u251c\u2500\u2500 memory.py\n\u2502     \u251c\u2500\u2500 prior.py\n\u2502     \u251c\u2500\u2500 program.py\n\u2502     \u251c\u2500\u2500 run.py\n\u2502     \u251c\u2500\u2500 subroutines.py\n\u2502     \u251c\u2500\u2500 tf_state_manager.py\n\u2502     \u251c\u2500\u2500 train.py\n\u2502     \u251c\u2500\u2500 train_stats.py\n\u2502     \u251c\u2500\u2500 utils.py\n\u2502     \u251c\u2500\u2500 variance.py\n\u2502     \u251c\u2500\u2500 config/\n\u2502     \u251c\u2500\u2500 gp/\n\u2502     \u251c\u2500\u2500 language_model/\n\u2502     \u251c\u2500\u2500 policy/\n\u2502     \u251c\u2500\u2500 policy_optimizer/\n\u2502     \u251c\u2500\u2500 scripts/\n\u2502     \u251c\u2500\u2500 task/\n\u2502     \u2514\u2500\u2500 test/\n\u2514\u2500\u2500 tools/\n  \u251c\u2500\u2500 TOOLS_STRUCTURE.txt\n  \u251c\u2500\u2500 python/\n  \u2502   \u251c\u2500\u2500 run.py\n  \u2502   \u251c\u2500\u2500 benchmark/\n  \u2502   \u251c\u2500\u2500 cli/\n  \u2502   \u2514\u2500\u2500 setup/\n  \u2502     \u2514\u2500\u2500 setup.py\n  \u251c\u2500\u2500 bash/\n  \u2502   \u251c\u2500\u2500 run.sh\n  \u2502   \u251c\u2500\u2500 benchmark/\n  \u2502   \u251c\u2500\u2500 cli/\n  \u2502   \u251c\u2500\u2500 lib/\n  \u2502   \u251c\u2500\u2500 setup/\n  \u2502   \u2514\u2500\u2500 test/\n  \u2514\u2500\u2500 bat/\n    \u251c\u2500\u2500 run.bat\n    \u251c\u2500\u2500 benchmark/\n    \u251c\u2500\u2500 setup/\n    \u2514\u2500\u2500 test/\n</code></pre>"}]}